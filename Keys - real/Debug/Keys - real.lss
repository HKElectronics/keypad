
Keys - real.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000026c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  00800100  00800100  0000026c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000029c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000079c  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000668  00000000  00000000  00000a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002d7  00000000  00000000  00001104  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  000013dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000035c  00000000  00000000  00001410  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000176c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	13 c0       	rjmp	.+38     	; 0x28 <__ctors_end>
   2:	22 c0       	rjmp	.+68     	; 0x48 <__bad_interrupt>
   4:	21 c0       	rjmp	.+66     	; 0x48 <__bad_interrupt>
   6:	20 c0       	rjmp	.+64     	; 0x48 <__bad_interrupt>
   8:	1f c0       	rjmp	.+62     	; 0x48 <__bad_interrupt>
   a:	1e c0       	rjmp	.+60     	; 0x48 <__bad_interrupt>
   c:	1d c0       	rjmp	.+58     	; 0x48 <__bad_interrupt>
   e:	1c c0       	rjmp	.+56     	; 0x48 <__bad_interrupt>
  10:	1b c0       	rjmp	.+54     	; 0x48 <__bad_interrupt>
  12:	1a c0       	rjmp	.+52     	; 0x48 <__bad_interrupt>
  14:	19 c0       	rjmp	.+50     	; 0x48 <__bad_interrupt>
  16:	18 c0       	rjmp	.+48     	; 0x48 <__bad_interrupt>
  18:	17 c0       	rjmp	.+46     	; 0x48 <__bad_interrupt>
  1a:	16 c0       	rjmp	.+44     	; 0x48 <__bad_interrupt>
  1c:	15 c0       	rjmp	.+42     	; 0x48 <__bad_interrupt>
  1e:	14 c0       	rjmp	.+40     	; 0x48 <__bad_interrupt>
  20:	13 c0       	rjmp	.+38     	; 0x48 <__bad_interrupt>
  22:	12 c0       	rjmp	.+36     	; 0x48 <__bad_interrupt>
  24:	11 c0       	rjmp	.+34     	; 0x48 <__bad_interrupt>
  26:	10 c0       	rjmp	.+32     	; 0x48 <__bad_interrupt>

00000028 <__ctors_end>:
  28:	11 24       	eor	r1, r1
  2a:	1f be       	out	0x3f, r1	; 63
  2c:	cf ef       	ldi	r28, 0xFF	; 255
  2e:	d1 e0       	ldi	r29, 0x01	; 1
  30:	de bf       	out	0x3e, r29	; 62
  32:	cd bf       	out	0x3d, r28	; 61

00000034 <__do_clear_bss>:
  34:	21 e0       	ldi	r18, 0x01	; 1
  36:	a0 e0       	ldi	r26, 0x00	; 0
  38:	b1 e0       	ldi	r27, 0x01	; 1
  3a:	01 c0       	rjmp	.+2      	; 0x3e <.do_clear_bss_start>

0000003c <.do_clear_bss_loop>:
  3c:	1d 92       	st	X+, r1

0000003e <.do_clear_bss_start>:
  3e:	a3 31       	cpi	r26, 0x13	; 19
  40:	b2 07       	cpc	r27, r18
  42:	e1 f7       	brne	.-8      	; 0x3c <.do_clear_bss_loop>
  44:	7e d0       	rcall	.+252    	; 0x142 <main>
  46:	d6 c0       	rjmp	.+428    	; 0x1f4 <_exit>

00000048 <__bad_interrupt>:
  48:	db cf       	rjmp	.-74     	; 0x0 <__vectors>

0000004a <scankeys>:
char scankeys()
{
	//************ keypad scan routine ***********
// Column 1 scan:  Potential keys, 1, 4, 7, *

	PORTD = 0x01;
  4a:	81 e0       	ldi	r24, 0x01	; 1
  4c:	8b b9       	out	0x0b, r24	; 11
				
	#ifndef DEBUG
		_delay_us(2);	 //settling time
	#endif				
				temp=PIND;
  4e:	89 b1       	in	r24, 0x09	; 9
  50:	90 e0       	ldi	r25, 0x00	; 0
  52:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <temp+0x1>
  56:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <temp>

	temp = PIND;
  5a:	89 b1       	in	r24, 0x09	; 9
  5c:	28 2f       	mov	r18, r24
  5e:	30 e0       	ldi	r19, 0x00	; 0
  60:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <temp+0x1>
  64:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <temp>
			if (temp != 0x00)
  68:	23 2b       	or	r18, r19
  6a:	e1 f0       	breq	.+56     	; 0xa4 <scankeys+0x5a>
			{
				switch(temp)
  6c:	80 31       	cpi	r24, 0x10	; 16
  6e:	69 f0       	breq	.+26     	; 0x8a <scankeys+0x40>
  70:	18 f4       	brcc	.+6      	; 0x78 <scankeys+0x2e>
  72:	88 30       	cpi	r24, 0x08	; 8
  74:	31 f0       	breq	.+12     	; 0x82 <scankeys+0x38>
  76:	14 c0       	rjmp	.+40     	; 0xa0 <scankeys+0x56>
  78:	80 32       	cpi	r24, 0x20	; 32
  7a:	59 f0       	breq	.+22     	; 0x92 <scankeys+0x48>
  7c:	80 34       	cpi	r24, 0x40	; 64
  7e:	69 f0       	breq	.+26     	; 0x9a <scankeys+0x50>
  80:	0f c0       	rjmp	.+30     	; 0xa0 <scankeys+0x56>
				 {
					case 8 :
					key = '1';
  82:	81 e3       	ldi	r24, 0x31	; 49
  84:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <key>
					break;
  88:	0b c0       	rjmp	.+22     	; 0xa0 <scankeys+0x56>
					case 16 :
					key = '4';
  8a:	84 e3       	ldi	r24, 0x34	; 52
  8c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <key>
					break;
  90:	07 c0       	rjmp	.+14     	; 0xa0 <scankeys+0x56>
					case 32 :
					key = '7';
  92:	87 e3       	ldi	r24, 0x37	; 55
  94:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <key>
					break;
  98:	03 c0       	rjmp	.+6      	; 0xa0 <scankeys+0x56>
					case 64 :
					key = '*';
  9a:	8a e2       	ldi	r24, 0x2A	; 42
  9c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <key>
					break;
				} 
			PORTD = 0x02;
  a0:	82 e0       	ldi	r24, 0x02	; 2
  a2:	8b b9       	out	0x0b, r24	; 11
	#ifndef DEBUG
		_delay_us(2);	 //settling time
	#endif			
			}

			temp=PIND;
  a4:	89 b1       	in	r24, 0x09	; 9
  a6:	28 2f       	mov	r18, r24
  a8:	30 e0       	ldi	r19, 0x00	; 0
  aa:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <temp+0x1>
  ae:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <temp>
			if (temp != 0x00)
  b2:	23 2b       	or	r18, r19
  b4:	e1 f0       	breq	.+56     	; 0xee <scankeys+0xa4>
			{
				switch(temp)
  b6:	82 31       	cpi	r24, 0x12	; 18
  b8:	69 f0       	breq	.+26     	; 0xd4 <scankeys+0x8a>
  ba:	18 f4       	brcc	.+6      	; 0xc2 <scankeys+0x78>
  bc:	8a 30       	cpi	r24, 0x0A	; 10
  be:	31 f0       	breq	.+12     	; 0xcc <scankeys+0x82>
  c0:	14 c0       	rjmp	.+40     	; 0xea <scankeys+0xa0>
  c2:	82 32       	cpi	r24, 0x22	; 34
  c4:	59 f0       	breq	.+22     	; 0xdc <scankeys+0x92>
  c6:	82 34       	cpi	r24, 0x42	; 66
  c8:	69 f0       	breq	.+26     	; 0xe4 <scankeys+0x9a>
  ca:	0f c0       	rjmp	.+30     	; 0xea <scankeys+0xa0>
				{
					case 10 :
					key = '2';
  cc:	82 e3       	ldi	r24, 0x32	; 50
  ce:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <key>
					break;
  d2:	0b c0       	rjmp	.+22     	; 0xea <scankeys+0xa0>
					case 18 :
					key = '5';
  d4:	85 e3       	ldi	r24, 0x35	; 53
  d6:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <key>
					break;
  da:	07 c0       	rjmp	.+14     	; 0xea <scankeys+0xa0>
					case 34 :
					key = '8';
  dc:	88 e3       	ldi	r24, 0x38	; 56
  de:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <key>
					break;
  e2:	03 c0       	rjmp	.+6      	; 0xea <scankeys+0xa0>
					case 66 :
					key = '0';
  e4:	80 e3       	ldi	r24, 0x30	; 48
  e6:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <key>
					break;
				}
				PORTD = 0x04;
  ea:	84 e0       	ldi	r24, 0x04	; 4
  ec:	8b b9       	out	0x0b, r24	; 11
	#ifndef DEBUG
		_delay_us(2);	 //settling time
	#endif	
			}
			temp=PIND;
  ee:	89 b1       	in	r24, 0x09	; 9
  f0:	28 2f       	mov	r18, r24
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <temp+0x1>
  f8:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <temp>
			if (temp != 0x00)
  fc:	23 2b       	or	r18, r19
  fe:	f1 f0       	breq	.+60     	; 0x13c <scankeys+0xf2>
			{
				switch(temp)
 100:	84 31       	cpi	r24, 0x14	; 20
 102:	69 f0       	breq	.+26     	; 0x11e <scankeys+0xd4>
 104:	18 f4       	brcc	.+6      	; 0x10c <scankeys+0xc2>
 106:	8c 30       	cpi	r24, 0x0C	; 12
 108:	31 f0       	breq	.+12     	; 0x116 <scankeys+0xcc>
 10a:	14 c0       	rjmp	.+40     	; 0x134 <scankeys+0xea>
 10c:	84 32       	cpi	r24, 0x24	; 36
 10e:	59 f0       	breq	.+22     	; 0x126 <scankeys+0xdc>
 110:	84 34       	cpi	r24, 0x44	; 68
 112:	69 f0       	breq	.+26     	; 0x12e <scankeys+0xe4>
 114:	0f c0       	rjmp	.+30     	; 0x134 <scankeys+0xea>
				{
					case 12 :
					key = '3';
 116:	83 e3       	ldi	r24, 0x33	; 51
 118:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <key>
					break;
 11c:	0b c0       	rjmp	.+22     	; 0x134 <scankeys+0xea>
					case 20 :
					key = '6';
 11e:	86 e3       	ldi	r24, 0x36	; 54
 120:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <key>
					break;
 124:	07 c0       	rjmp	.+14     	; 0x134 <scankeys+0xea>
					case 36 :
					key = '9';
 126:	89 e3       	ldi	r24, 0x39	; 57
 128:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <key>
					break;
 12c:	03 c0       	rjmp	.+6      	; 0x134 <scankeys+0xea>
					case 68 :
					key = '#';
 12e:	83 e2       	ldi	r24, 0x23	; 35
 130:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <key>
				}
	#ifndef DEBUG
		_delay_us(2);	 //settling time
	#endif	

				temp = 0x00;
 134:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <temp+0x1>
 138:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <temp>
//				CLEAR(D,0)	;
	#ifndef DEBUG
		_delay_us(2);	 //settling time
	#endif	
				return(key);
}
 13c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <key>
 140:	08 95       	ret

00000142 <main>:
int column_scan;


int main(void)
	{
	key = 'Q';
 142:	81 e5       	ldi	r24, 0x51	; 81
 144:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <key>
		flag = 0x00;
 148:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 14c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
//setup keypad data direction register
		DDRD = 0x07;	
 150:	87 e0       	ldi	r24, 0x07	; 7
 152:	8a b9       	out	0x0a, r24	; 10
		column_scan = 0;
 154:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <column_scan+0x1>
 158:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <column_scan>
		column = 0x01;
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <column+0x1>
 164:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <column>
	
		while (1)
			{

			key = scankeys();
			putchar( key );
 168:	cd e0       	ldi	r28, 0x0D	; 13
 16a:	d1 e0       	ldi	r29, 0x01	; 1
		column = 0x01;
	
		while (1)
			{

			key = scankeys();
 16c:	6e df       	rcall	.-292    	; 0x4a <scankeys>
 16e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <key>
			putchar( key );
 172:	6a 81       	ldd	r22, Y+2	; 0x02
 174:	7b 81       	ldd	r23, Y+3	; 0x03
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	01 d0       	rcall	.+2      	; 0x17c <fputc>
 17a:	f8 cf       	rjmp	.-16     	; 0x16c <main+0x2a>

0000017c <fputc>:
 17c:	0f 93       	push	r16
 17e:	1f 93       	push	r17
 180:	cf 93       	push	r28
 182:	df 93       	push	r29
 184:	fb 01       	movw	r30, r22
 186:	23 81       	ldd	r18, Z+3	; 0x03
 188:	21 fd       	sbrc	r18, 1
 18a:	03 c0       	rjmp	.+6      	; 0x192 <fputc+0x16>
 18c:	8f ef       	ldi	r24, 0xFF	; 255
 18e:	9f ef       	ldi	r25, 0xFF	; 255
 190:	2c c0       	rjmp	.+88     	; 0x1ea <fputc+0x6e>
 192:	22 ff       	sbrs	r18, 2
 194:	16 c0       	rjmp	.+44     	; 0x1c2 <fputc+0x46>
 196:	46 81       	ldd	r20, Z+6	; 0x06
 198:	57 81       	ldd	r21, Z+7	; 0x07
 19a:	24 81       	ldd	r18, Z+4	; 0x04
 19c:	35 81       	ldd	r19, Z+5	; 0x05
 19e:	42 17       	cp	r20, r18
 1a0:	53 07       	cpc	r21, r19
 1a2:	44 f4       	brge	.+16     	; 0x1b4 <fputc+0x38>
 1a4:	a0 81       	ld	r26, Z
 1a6:	b1 81       	ldd	r27, Z+1	; 0x01
 1a8:	9d 01       	movw	r18, r26
 1aa:	2f 5f       	subi	r18, 0xFF	; 255
 1ac:	3f 4f       	sbci	r19, 0xFF	; 255
 1ae:	31 83       	std	Z+1, r19	; 0x01
 1b0:	20 83       	st	Z, r18
 1b2:	8c 93       	st	X, r24
 1b4:	26 81       	ldd	r18, Z+6	; 0x06
 1b6:	37 81       	ldd	r19, Z+7	; 0x07
 1b8:	2f 5f       	subi	r18, 0xFF	; 255
 1ba:	3f 4f       	sbci	r19, 0xFF	; 255
 1bc:	37 83       	std	Z+7, r19	; 0x07
 1be:	26 83       	std	Z+6, r18	; 0x06
 1c0:	14 c0       	rjmp	.+40     	; 0x1ea <fputc+0x6e>
 1c2:	8b 01       	movw	r16, r22
 1c4:	ec 01       	movw	r28, r24
 1c6:	fb 01       	movw	r30, r22
 1c8:	00 84       	ldd	r0, Z+8	; 0x08
 1ca:	f1 85       	ldd	r31, Z+9	; 0x09
 1cc:	e0 2d       	mov	r30, r0
 1ce:	09 95       	icall
 1d0:	89 2b       	or	r24, r25
 1d2:	e1 f6       	brne	.-72     	; 0x18c <fputc+0x10>
 1d4:	d8 01       	movw	r26, r16
 1d6:	16 96       	adiw	r26, 0x06	; 6
 1d8:	8d 91       	ld	r24, X+
 1da:	9c 91       	ld	r25, X
 1dc:	17 97       	sbiw	r26, 0x07	; 7
 1de:	01 96       	adiw	r24, 0x01	; 1
 1e0:	17 96       	adiw	r26, 0x07	; 7
 1e2:	9c 93       	st	X, r25
 1e4:	8e 93       	st	-X, r24
 1e6:	16 97       	sbiw	r26, 0x06	; 6
 1e8:	ce 01       	movw	r24, r28
 1ea:	df 91       	pop	r29
 1ec:	cf 91       	pop	r28
 1ee:	1f 91       	pop	r17
 1f0:	0f 91       	pop	r16
 1f2:	08 95       	ret

000001f4 <_exit>:
 1f4:	f8 94       	cli

000001f6 <__stop_program>:
 1f6:	ff cf       	rjmp	.-2      	; 0x1f6 <__stop_program>
